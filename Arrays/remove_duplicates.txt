Problem Name: Remove Duplicates from Sorted Array

LeetCode Problem Link: https://leetcode.com/problems/remove-duplicates-from-sorted-array/

Problem Statement (Short):
Given a sorted array nums, remove the duplicates in-place such that each unique element appears only once.  
Return the new length. Do not allocate extra space for another array; you must do this by modifying the input array in-place with O(1) extra memory.

Example:
Input: nums = [1,1,2]  
Output: 2, nums = [1,2,_]

Approach (Two Pointer):
- Use two pointers: one (slow) for the position of the last unique element, one (fast) for scanning the array.
- When nums[fast] != nums[slow], increment slow and copy nums[fast] to nums[slow].

Steps:
1. If the array is empty, return 0.
2. Initialize `slow = 0`.
3. Loop `fast` from 1 to end of array:
   - If nums[fast] != nums[slow], increment slow and set nums[slow] = nums[fast].
4. Return slow + 1 as the new length.

Time Complexity:
- O(n), where n is the number of elements in the array.

Space Complexity:
- O(1), in-place operation.

Edge Cases:
- Empty array.
- All elements are the same.
- No duplicates in the array.
- Array with one element.